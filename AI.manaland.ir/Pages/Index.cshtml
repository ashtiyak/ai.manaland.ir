@page
@model IndexModel
@{
    ViewData["Title"] = "چت با Grok - xAI";
}

<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="~/css/site.css" rel="stylesheet" />
</head>
<body>
    <div class="container-fluid chat-container p-0">
        <div class="row" style="height: 100%;">
            <!-- سایدبار -->
            <div class="col-md-3 sidebar p-0">
                <div class="p-3 text-center">
                    <h4 class="mb-3">چت‌ها</h4>
                    <ul class="list-group" id="chat-list">
                        <li class="list-group-item bg-transparent border-secondary">چت جدید</li>
                    </ul>
                </div>
            </div>
            <!-- بخش اصلی چت -->
            <div class="col-md-9 chat-main p-0">
                <div class="messages" id="messages">
                    <div class="message ai">سلام! من Grok از xAI هستم. یه سوال بپرس تا باهم گپ بزنیم! 😄</div>
                </div>
                <div class="input-bar">
                    <div class="input-group p-2">
                        <select class="form-select" id="model-selector">
                            <option value="ArvanAI">Grok xAI</option>
                        </select>
                        <input type="text" class="form-control" id="user-input" placeholder="پیام خودت رو بنویس..." />
                        <button class="btn btn-success" onclick="sendMessage()">ارسال</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        let currentMessage = "";
        let messageElement = null;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .withAutomaticReconnect()
            .build();

        // تابع تشخیص زبان (برای انگلیسی به ltr)
        function isEnglish(text) {
            return /^[a-zA-Z\s.,!?]+$/.test(text.trim());
        }

        connection.on("ReceiveMessage", (sender, message) => {
            const messages = document.getElementById("messages");
            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${sender}`;
            messageDiv.textContent = message;
            if (isEnglish(message)) {
                messageDiv.classList.add("ltr");
            }
            messages.appendChild(messageDiv);
            messages.scrollTop = messages.scrollHeight;
        });

        connection.on("ReceiveMessageChunk", (chunk) => {
            console.log("Chunk received:", chunk);
            currentMessage += chunk || "";
            const messages = document.getElementById("messages");

            if (!messageElement) {
                messageElement = document.createElement("div");
                messageElement.className = "message ai";
                messages.appendChild(messageElement);
            }

            messageElement.textContent = currentMessage;
            if (isEnglish(currentMessage)) {
                messageElement.classList.add("ltr");
            } else {
                messageElement.classList.remove("ltr");
            }
            messages.scrollTop = messages.scrollHeight;
        });

        connection.on("ShowTyping", () => {
            const messages = document.getElementById("messages");
            const typing = document.createElement("div");
            typing.id = "typing";
            typing.className = "message ai typing";
            messages.appendChild(typing);
            messages.scrollTop = messages.scrollHeight;
        });

        connection.on("HideTyping", () => {
            const typing = document.getElementById("typing");
            if (typing) typing.remove();
            currentMessage = "";
            messageElement = null;
        });

        connection.on("ReceiveError", (error) => {
            const messages = document.getElementById("messages");
            const errorDiv = document.createElement("div");
            errorDiv.className = "message ai error";
            errorDiv.textContent = error;
            if (isEnglish(error)) {
                errorDiv.classList.add("ltr");
            }
            messages.appendChild(errorDiv);
            messages.scrollTop = messages.scrollHeight;
        });

        connection.start().then(() => {
            console.log("اتصال برقرار شد!");
        }).catch(err => console.error("خطا در اتصال:", err));

        async function sendMessage() {
            const input = document.getElementById("user-input");
            const model = document.getElementById("model-selector").value;
            const prompt = input.value.trim();
            if (!prompt) return;

            input.value = "";
            currentMessage = "";
            messageElement = null;
            try {
                await connection.invoke("SendMessage", prompt, model);
            } catch (err) {
                console.error("خطا در ارسال پیام:", err);
                const messages = document.getElementById("messages");
                const errorDiv = document.createElement("div");
                errorDiv.className = "message ai error";
                errorDiv.textContent = `خطا: ${err.message}`;
                if (isEnglish(err.message)) {
                    errorDiv.classList.add("ltr");
                }
                messages.appendChild(errorDiv);
                messages.scrollTop = messages.scrollHeight;
            }
        }

        document.getElementById("user-input").addEventListener("keypress", (e) => {
            if (e.key === "Enter") sendMessage();
        });
    </script>
</body>
</html>